from Crypto.Util.number import long_to_bytes

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library


from sage.all import *

N = Integer(13113180816763040887576781992067364636289723584543479342139964290889855987378109190372819034517913477911738026253141916115785049387269347257060732629562571)
v1 = Integer(11295696938311339473824077083449119515455766620804723271417795055153345707595152245303924808555919718654126902417279389829240793581636850443514989727075129)
v2 = Integer(25255532621039290870985214051278041571596463385115156541846401100873975663406085683775323107488) 


R = Zmod(N)
P = PolynomialRing( R, implementation='NTL' , names=('x',)); (x,) = P._first_ngens(1)

l = ceil(v2**(Integer(3) /Integer(2) ))
g = (l+x)**Integer(2)  - v1
print(long_to_bytes(int(l+g.small_roots()[0])))

